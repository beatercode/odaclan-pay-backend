"use strict";var e=require("path"),o=require("fs"),r=require("child_process"),n=require("util");function t(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var s=t(e),i=t(o),c=t(r);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function l(e,o,r,n){return new(r||(r=Promise))((function(t,s){function i(e){try{l(n.next(e))}catch(e){s(e)}}function c(e){try{l(n.throw(e))}catch(e){s(e)}}function l(e){var o;e.done?t(e.value):(o=e.value,o instanceof r?o:new r((function(e){e(o)}))).then(i,c)}l((n=n.apply(e,o||[])).next())}))}const u=["CHANGELOG.md","LICENSE","README.md"];function a(e){let o=e;const r=i.default.readdirSync(o);return r.includes("node_modules")||r.includes("lib")&&(o=s.default.resolve(o,"lib"),i.default.readdirSync(o).includes("node_modules"))?s.default.resolve(o,"node_modules"):void 0}function d(e){return l(this,void 0,void 0,(function*(){try{let o;if(e)try{return o=require(s.default.resolve(e,"pm2")),o}catch(o){throw console.error(`Cannot find module "pm2" from "${e}"!`),o}try{return o=require("pm2"),o}catch(e){}const r=function(){const[e]=process.argv;let o=s.default.dirname(e);for(;!/^[^/\\]*[/\\]$/.test(o);){const e=i.default.readdirSync(o);if(u.every((o=>e.includes(o))))return o;o=s.default.resolve(o,"..")}}();if(r){const e=a(r);if(e)try{return o=require(s.default.resolve(e,"pm2")),o}catch(e){}}const n=yield new Promise(((e,o)=>{c.default.exec("npm config get prefix",((r,n)=>{r?o(r):e(n.replace(/^\s+|\s+$/,""))}))}));if(!n)throw new Error("Cannot find npm config global prefix");const t=a(n);if(t)return o=require(s.default.resolve(t,"pm2")),o;throw new Error('Cannot find module "pm2"')}catch(e){throw console.error('Cannot find module "pm2" automatically, you can give the "node_modules" path it belongs to by yourself (see https://github.com/BillionBottle/pm2-intercom-log4js#api).'),e}}))}const f="a".charCodeAt(0);function m(){return process.env.PM2_PROCESS_INSTANCE_VAR||process.env.instance_var||"NODE_APP_INSTANCE"}const p=function(){let e;try{e=require(s.default.resolve("package.json")).name}catch(e){}return e||(e=function(e){if(Number.isNaN(e)||e<=0||e>Number.MAX_SAFE_INTEGER)return"";let o="";for(let r=0;r<e;r+=1)o+=String.fromCharCode(Math.floor(26*Math.random())+f);return o}(8)),e}(),y="@takin/pm2-intercom-log4js",h=`${y}:${p}:main`,v=`${y}:${p}:ping`,g=`${y}:${p}:reply`;function w(e){return l(this,void 0,void 0,(function*(){if(!function(){const e=process.env[m()];return Boolean(e)}())return;const o=n.promisify(e.connect.bind(e)),r=n.promisify(e.launchBus.bind(e));yield o();const t=yield r(),s=process.env[m()];if("0"===s){let o,r;console.log("Start pm2 intercom for log4js..."),t.on("process:msg",(n=>{const{raw:t,process:{name:s,pm_id:i}}=n;if(!t||"object"!=typeof t)return;const{topic:c}=t;if(c!==h&&c!==v||process.send({topic:g}),c===h)return o=s,r=i,void console.log(`Intercom's main process started. (${i}: ${s})`);"log4js:message"===c&&s===o&&e.sendDataToProcessId(r,t,(e=>{e&&(console.error("Send message to log4js failed!"),console.error(e))}))})),process.send({topic:h})}else console.log(`Process ${s} is waiting main process ready...`),yield new Promise((e=>{t.on("process:msg",(o=>{const{raw:r}=o;r&&"object"==typeof r&&r.topic===g&&(console.log(`Process ${s} is ready to log.`),t.close(),setTimeout(e))})),process.send({topic:v})}))}))}module.exports=function(e={}){return l(this,void 0,void 0,(function*(){try{const o=yield d(e.nodeModulesPath);yield w(o)}catch(e){console.error("PM2 intercom for log4js init failed!"),console.error(e)}}))};
